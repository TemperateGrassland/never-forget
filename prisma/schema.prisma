generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum FriendInviteStatus {
  PENDING
  ACCEPTED
  IGNORED
}

model User {
  id            String     @id @default(cuid())
  email         String     @unique
  emailVerified DateTime?
  createdAt     DateTime   @default(now())
  dateOfBirth   DateTime?
  firstName     String?
  isActive      Boolean    @default(true)
  lastName      String?
  phoneNumber   String?    @unique
  updatedAt     DateTime   @updatedAt
  reminders     Reminder[] // One-to-many relationship
  hasReceivedWelcomeEmail Boolean  @default(false)
  accounts      Account[] // One-to-many relationship
  sessions      Session[] // One-to-many relationship
  stripeCustomerId  String?  @unique
  // Subscription tracking fields
  subscriptionId        String?   @unique // Current Stripe subscription ID
  subscriptionStatus    String?   // active, canceled, past_due, etc.
  subscriptionEndsAt    DateTime? // When current period ends
  subscriptionPlanId    String?   // Stripe price ID of current plan
  subscriptionStartedAt DateTime? // When subscription began
  friends    User[] @relation("UserFriends")
  friendOf   User[] @relation("UserFriends")
  sentFriendInvites FriendInvite[] @relation("SentFriendInvites")
  feedback   Feedback[] // One-to-many relationship for feedback
}

model Account {
  id                String  @id @default(cuid())
  userId            String // Foreign key referencing User.id
  provider          String
  providerAccountId String
  type              String
  access_token      String?
  refresh_token     String?
  expires_at        Int?
  id_token          String?
  scope             String?
  token_type        String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId]) // Ensure unique accounts per provider
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  phoneNumber  String?
  // Mark userId as unique to enforce one-to-one relationship
  // @@unique([userId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token]) // Ensure token uniqueness
}

enum ReminderFrequency {
  NONE // One-time reminder (no repeat)
  DAILY // Every day
  WEEKLY // Once a week
  MONTHLY // Once a month
  YEARLY // Once a year
}

model Reminder {
  id          String   @id @default(uuid())
  title       String
  userId      String
  isComplete  Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  User        User     @relation(fields: [userId], references: [id])
  dueDate     DateTime?
  frequency   ReminderFrequency @default(NONE)
}

model WaitlistEntry {
  id        String   @id @default(cuid())
  email     String   @unique
  createdAt DateTime @default(now())
}

model FriendInvite {
  id         String             @id @default(cuid())
  fromUser   User               @relation("SentFriendInvites", fields: [fromUserId], references: [id])
  fromUserId String
  phone      String             // E.164 format WhatsApp number
  status     FriendInviteStatus @default(PENDING)
  createdAt  DateTime           @default(now())
}

enum FeedbackType {
  COMPLEMENT
  CRITICISM
}

model Feedback {
  id        String       @id @default(cuid())
  type      FeedbackType
  message   String
  userId    String?      // Optional - can be anonymous
  user      User?        @relation(fields: [userId], references: [id])
  createdAt DateTime     @default(now())
  userAgent String?      // For tracking browser/device info
  ipAddress String?      // For analytics (anonymized)
}