generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String     @id @default(cuid())
  email        String     @unique
  emailVerified  DateTime?
  createdAt    DateTime   @default(now())
  dateOfBirth  DateTime?
  firstName    String?
  isActive     Boolean    @default(true)
  lastName     String?
  passwordHash String?
  phoneNumber  String?
  updatedAt    DateTime   @updatedAt
  reminders    Reminder[] // One-to-many relationship
  accounts     Account[]  // One-to-many relationship
  sessions     Session[]  // One-to-many relationship
}

model Account {
  id                 String       @id @default(cuid())
  userId             String       // Foreign key referencing User.id
  provider           String
  providerAccountId  String
  type               String
  access_token       String?   
  refresh_token      String?
  expires_at         Int?
  id_token           String?
  scope              String?
  token_type         String?
  session_state      String?
  user               User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId]) // Ensure unique accounts per provider
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Mark userId as unique to enforce one-to-one relationship
  // @@unique([userId])
}

model VerificationToken {
  identifier String
  token      String  @unique
  expires    DateTime

  @@unique([identifier, token]) // Ensure token uniqueness
}

enum ReminderFrequency {
  NONE        // No repeat
  DAILY       // Every day
  EVERY_OTHER_DAY // Every other day
  WEEKLY      // Once a week
  WEEKEND     // Every weekend
  MONTHLY     // Once a month
  YEARLY      // Once a year
}

model Reminder {
  id          String           @id @default(cuid())
  title       String
  description String? 
  userId      String
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  user        User              @relation(fields: [userId], references: [id])
  isComplete  Boolean           @default(false) 
}